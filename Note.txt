Micro-Frontends Course - Beginner to Expert
(https://www.youtube.com/watch?v=lKKsjpH09dU)

https://github.com/jherr/micro-fes-beginner-to-expert
https://github.com/Annie-Huang/micro-fes-beginner-to-expert


Other tutorial to watch:
- Five Module Federation/Micro-Frontend Mistakes    2.
- Professional Micro-Frontend Shared State Setup    1.
- Typescript with Module Federation || TypeScript Tutorial  3.
- Module Federation Into Production     4.
- State Management for Module Federation Four Ways
- Micro-FEs Simplified

- React + RxJS = Reactive Global Goodness
- State Management for React: Jotai From Beginners to Masters
- Typescript for React and MobX From Beginners to Masters
- Mastering Typescript State using Zustand
- Introducing Valtio - Short Subject
- Introducing Jotai || React State Manager Tutorial
- Zustand - New React State Manager

- LIVE! How to build a resilient shared Header/Footer using Module Federation
- A/B tests in Module Federation
- Full Site Federation
- Full Site Federation in Webpack 5
- Recoil; The Best Micro-FE/Mod-Fed State Manager?
- Federate Module Dashboard
- Introducing Module Federation in Webpack 5
- Module Federation for Plugins || Module Federation Tutorial


- Zack Jackson - Module Federation      5.
- Microfrontends with React | Microfrontend Tutorial
- Micro Frontends - Routing between remotes
- Module Federation in React | React Micro Frontend

Done:
- Mastering Micro-Frontends With RSpack and Module Federation
===========================================================================================

Note: pnpx is a Window thing, while pnpm is a Mac thing;

PS C:\react\micro-fes-beginner-to-expert> pnpx create-mf-app
Packages: +73
+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
Progress: resolved 73, reused 18, downloaded 55, added 73, done
? Pick the name of your app: home
? Project Type: Application
? Port number: 3000
? Framework: react
? Language: javascript
? CSS: Tailwind
? Packer: Webpack
Your 'home' project is ready to go.

Next steps:

▶️ cd home
▶️ npm install
▶️ npm start

PS C:\react\micro-fes-beginner-to-expert> cd home
PS C:\react\micro-fes-beginner-to-expert\home> npm install
PS C:\react\micro-fes-beginner-to-expert\home> npm start

http://localhost:3000/

PS C:\react\micro-fes-beginner-to-expert\home> npm install remixicon
PS C:\react\micro-fes-beginner-to-expert\home> npm install react-router-dom

Home page can access pdp and cart page content as well:
http://localhost:3000/product/1
http://localhost:3000/cart

PS C:\react\micro-fes-beginner-to-expert\home> npm install @testing-library/react jest --save-dev
PS C:\react\micro-fes-beginner-to-expert\home> npm install -D jest-environment-jsdom
PS C:\react\micro-fes-beginner-to-expert\home> npm install cypress --save-dev

PS C:\react\micro-fes-beginner-to-expert\home> npm run test
PS C:\react\micro-fes-beginner-to-expert\home> npm run cy:open

------------------

Note: pdp stand for product detail page.

PS C:\react\micro-fes-beginner-to-expert> pnpx create-mf-app
? Pick the name of your app: pdp
? Project Type: Application
? Port number: 3001
? Framework: react
? Language: javascript
? CSS: Tailwind
? Packer: Webpack
Your 'pdp' project is ready to go.

Next steps:

▶️ cd pdp
▶️ npm install
▶️ npm start

PS C:\react\micro-fes-beginner-to-expert> cd pdp
PS C:\react\micro-fes-beginner-to-expert\pdp> npm install
PS C:\react\micro-fes-beginner-to-expert\pdp> npm start
http://localhost:3001/

PS C:\react\micro-fes-beginner-to-expert\pdp> npm install react-router-dom
PS C:\react\micro-fes-beginner-to-expert\pdp> npm install remixicon

------------------

PS C:\react\micro-fes-beginner-to-expert> pnpx create-mf-app
Packages: +73
+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
Progress: resolved 73, reused 73, downloaded 0, added 73, done
? Pick the name of your app: server
? Project Type: API Server
? Port number: 8080
? Template: nestjs-auth
Your 'server' project is ready to go.

Next steps:

▶️ cd server
▶️ npm install
▶️ npm start

PS C:\react\micro-fes-beginner-to-expert> cd .\server\
PS C:\react\micro-fes-beginner-to-expert\server> npm install
PS C:\react\micro-fes-beginner-to-expert\server> npm run start
http://localhost:8080/fidget-1.jpg
http://localhost:8080/unauthorized

PS C:\react\micro-fes-beginner-to-expert\server> npm run start:dev
http://localhost:8080/products
http://localhost:8080/products/1


------------------

PS C:\react\micro-fes-beginner-to-expert> pnpx create-mf-app
Packages: +73
+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
Progress: resolved 73, reused 73, downloaded 0, added 73, done
? Pick the name of your app: cart
? Project Type: Application
? Port number: 3002
? Framework: react
? Language: javascript
? CSS: Tailwind
? Packer: Webpack
Your 'cart' project is ready to go.

Next steps:

▶️ cd cart
▶️ npm install
▶️ npm start

PS C:\react\micro-fes-beginner-to-expert> cd .\cart\
PS C:\react\micro-fes-beginner-to-expert\cart> npm install
PS C:\react\micro-fes-beginner-to-expert\cart> npm run start
http://localhost:3002/

PS C:\react\micro-fes-beginner-to-expert\cart> npm install rxjs
PS C:\react\micro-fes-beginner-to-expert\cart> npm install remixicon


------------------


PS C:\react\micro-fes-beginner-to-expert> pnpx create-mf-app
? Pick the name of your app: addtocart
? Project Type: Application
? Port number: 3003
? Framework: solid-js           <--- a different framework from react. Prove different frontend app can work together.
? Language: javascript
? CSS: Tailwind
? Packer: Webpack
Your 'addtocart' project is ready to go.

Next steps:

▶️ cd addtocart
▶️ npm install
▶️ npm start

PS C:\react\micro-fes-beginner-to-expert> cd .\addtocart\
PS C:\react\micro-fes-beginner-to-expert\addtocart> npm install
PS C:\react\micro-fes-beginner-to-expert\addtocart> npm run start
http://localhost:3003
http://localhost:3003/remoteEntry.js


----------------------------------------

http://localhost:3000/
http://localhost:3000/remoteEntry.js       << will appear as long as you add things into the 'exposes' section in the webpack.config.js
http://localhost:3001/
http://localhost:8080/products
http://localhost:8080/products/1

Go to each app in the following order:
server (start:dev) -> home (start) -> pdp (start) -> cart (start) -> addtocart (start)

Name of the application or lib:
you can use
home or
home_page, but not
home-page as the name in ModuleFederationPlugin


To fix tailwind 3 not working with federation module problem:
https://dev.to/blessonabraham/building-micro-frontend-with-react-module-federation-3j46
PS C:\react\micro-fes-beginner-to-expert\home> npm install mini-css-extract-plugin --save-dev
PS C:\react\micro-fes-beginner-to-expert\pdp> npm install mini-css-extract-plugin --save-dev


Shared library and make singleton download:
In C:\react\micro-fes-beginner-to-expert\pdp\webpack.config.js, we can see
      shared: {
        ...deps,
        react: {
          singleton: true,
          requiredVersion: deps.react,
        },
        'react-dom': {
          singleton: true,
          requiredVersion: deps['react-dom'],
        },
      },
Note04 - Before we click button to show the Header.jpg
Note05 - After we click button to show the Header.jpg
You can see when we click the button, it only download src_Header_jsx.js file.
You can see we ONLY download react-dom and react ONCE, no duplicate download


Error Boundary:
Absolutely need the error boundary file, e.g. C:\react\micro-fes-beginner-to-expert\pdp\src\SafeComponent.jsx
To protect App that got component which change contract.
e.g. <Header> in <Home> app change to take in a name prop, and the App.js from <Home> has change
     from <Header />
     to <Header name='home' />
     <Pdp> app will break without a nice error boundary file.


You don't have to just share components, you can share javascript (e.g. service api call) as well:
      exposes: {
        './Header': './src/Header.jsx',
        './Footer': './src/Footer.jsx',
        './products': './src/products.js',
      },


In order to run crul command successfully in C:\react\micro-fes-beginner-to-expert\server\README.md, you will need to run it in git bash!!
----------------------------------------------------------------------------------------------------------------------------------------------------
Annie@DESKTOP-BH46C1T MINGW64 /c/react/micro-fes-beginner-to-expert (main)
$ curl -X POST http://localhost:8080/auth/login -d '{"username": "maria", "password": "123"}' -H "Content-Type: application/json"
  % Total    % Received % Xferd  Average Speed   Time    Time     Time  Current
                                 Dload  Upload   Total   Spent    Left  Speed
100   223  100   183  100    40  32527   7109 --:--:-- --:--:-- --:--:-- 44600{"access_token":"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VybmFtZSI6Im1hcmlhIiwic3ViIjoyLCJpYXQiOjE3MTUzMzg5MjcsImV4cCI6MTcxNTQyNTMyN30.l9iDqiY1a61WWe8OwLRFT7STCr1C_yrltYGaPUJjbWM"}

Annie@DESKTOP-BH46C1T MINGW64 /c/react/micro-fes-beginner-to-expert (main)
$ curl http://localhost:8080/authorized -H "Authorization: Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VybmFtZSI6Im1hcmlhIiwic3ViIjoyLCJpYXQiOjE3MTUzMzg5MjcsImV4cCI6MTcxNTQyNTMyN30.l9iDqiY1a61WWe8OwLRFT7STCr1C_yrltYGaPUJjbWM"
  % Total    % Received % Xferd  Average Speed   Time    Time     Time  Current
                                 Dload  Upload   Total   Spent    Left  Speed
100    12  100    12    0     0   2248      0 --:--:-- --:--:-- --:--:--  2400{"userId":2}



After changing it from 'http://localhost:8080/authorized' to 'http://localhost:8080/cart', we want to see if it still work:
Annie@DESKTOP-BH46C1T MINGW64 /c/react/micro-fes-beginner-to-expert (main)
$ curl http://localhost:8080/cart -H "Authorization: Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VybmFtZSI6Im1hcmlhIiwic3ViIjoyLCJpYXQiOjE3MTUzMzg5MjcsImV4cCI6MTcxNTQyNTMyN30.l9iDqiY1a61WWe8OwLRFT7STCr1C_yrltYGaPUJjbWM"
  % Total    % Received % Xferd  Average Speed   Time    Time     Time  Current
                                 Dload  Upload   Total   Spent    Left  Speed
100    12  100    12    0     0    668      0 --:--:-- --:--:-- --:--:--   705{"userId":2}


After update the cart.controller.ts method:
Annie@DESKTOP-BH46C1T MINGW64 /c/react/micro-fes-beginner-to-expert (main)
$ curl http://localhost:8080/cart -H "Authorization: Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VybmFtZSI6Im1hcmlhIiwic3ViIjoyLCJpYXQiOjE3MTUzMzg5MjcsImV4cCI6MTcxNTQyNTMyN30.l9iDqiY1a61WWe8OwLRFT7STCr1C_yrltYGaPUJjbWM"
% Total    % Received % Xferd  Average Speed   Time    Time     Time  Current
                               Dload  Upload   Total   Spent    Left  Speed
100  1478  100  1478    0     0  61304      0 --:--:-- --:--:-- --:--:-- 64260{"cartItems":[{"id":2,"name":"Solid Rainbow","price":8.99,"description":"A solid steel of rainbow fidget spinning goodness.","image":"http://localhost:8080/fidget-2.jpg","longDescription":"The Solid Rainbow fidget spinner is a hit. Its full metal body is made from a single piece of steel that takes hours to cut and machine. The center body has been treated with an electroplated natural copper finish that will tarnish over time as it touches your skin, just as the copper toys from the 70s did. The rainbow finish on the outer ring can be customized using various methods, including leaving it raw to see the natural finish on the stainless steel or applying a colored powder coat finish.","quantity":1},{"id":5,"name":"Rainbow Flames","price":7.99,"description":"Flaming rainbow fun for all ages.","image":"http://localhost:8080/fidget-5.jpg","longDescription":"Rainbow Flames are small (1.5″ in diameter or approx. 46mm) fidget spinner toys. They are fun for people of all ages, including adults and kids. Kids love to play with Rainbow Flames because they are easy to spin and they come in assorted colors, like blue, green, red, white, purple and yellow possible combinations. Rainbow Flames fidget spinners are great for killing time; perfect for daydreaming, calming nerves, focusing attention & relaxing; better than nail biting & knuckle cracking. Rainbow Flames fidget spinners can be successfully incorporated into therapy sessions as fidget toys","quantity":1}]}



Styling in the module federation:
- css cannot be shared within different modules.
- style in js or js can be shared within different modules.
That is why we need to install remixicon in every app.


Reactive state management:
In this tutorial, the whole thing is reactive, becauser you have that rxjs subscribe mechanism.
So whatever state manager you choose, I strongly recommend that you make sure that it's reactive somehow.
And you know, all of them are really at some level, but things like MobX, Valtio, Jotai. There are all very reactive mechanism.
Of course, redux reacts a bit more elaborate. I would recommend using Redux toolkit if you're going to do that.
But they all work, which is really important part, because context also works. I am not going to do here, but context does work in these system.
https://dev.to/nguyenhongphat0/react-state-management-in-2024-5e7l


@testing-library/react-hooks:
no longer support in react 18, Use @testing-library/react instead.
https://github.com/testing-library/react-hooks-testing-library/issues/654
https://github.com/testing-library/react-testing-library/pull/991



Things to test in the new app:
-------------------------------------
- Which lint rule to use (e.g. want to import order as well?)
- Use Typescript
    --> Can use Typescript but Typescript support will lost when using remote component or function because we didn't know at build time what the module is like. we only know it from run time.
    --> Will have use '@ts-ignore' for all the remote import otherwise it will complain ' Cannot find module'
- Use styled component. (See if you can share import rather than make network call to styled component bundle for every app)
- Use Vite (Vite use rollup, not webpack, see if you can use Vite but still use webpack5)
    --> Not suggested use Vite. Vite use rollup which is ECMAScript, you will need to specific set it if you use a webpack host with a vite remote. and usage is funny too. import ButtonModule from 'remote/Button';, const Button = ButtonModule.default;
    --> Vite remote + Vite host seems working well but I am concern if there is problem we couldn't find any answers from google.
- Use Rspack (Rspack using typescript and Rush underneath)
    --> Same reason as Vite, rspack require another configuration (rspack.config.js instead of webpack.config.js). The Syntax is different.
        Although we got a sample running but I don't want to encounter problem and not able to find solution in google because it's too new.
    --> Rspack configure seems easier than Vite config, at least not ECMScript and Commonjs conversion.
- Which state management tool to use? rxjs?
    o Need to think of whether we have a central store app or different areas of api calls sit with its own app
    o See if we can share it rather than import one bundle for each app.
    --> Jack suggest Recoil or Jotai over Rudux and Zustand because it create more friction to create new atomic state hence discourage you to share too many state | big state (reduce tightening)
- Test deployment in an environment (do we separate the app in different repo first??)
- Unit test
    --> If may not be as good if you use component from remote, but guess you can find a way to mock it.
- Template app should be created after the 2 apps is created.
- See if you can share more common lib, like styled component.
- Use bun
- End to End test (testcafe? cypress requires node 18+ to install)


Need to test:
-------------------------------
(Try it on the vite-mod-fed app)
App1 have a useCounter(useStore) hook and a store and a <Button> component.
App2 has a <ButtonWrapper> component which will <button> component that useStore hook and also a <Button> component.    <-- 2 buttons in here.
App3 has a <button> component that useStore hook, and also has <Button>, and also <ButtonWrapper>   <-- 4 buttons in here.
Need to check when you click any one button in App3, the other three buttons will update as well.



Comparison:
--------------------------------------
Build Time Sharing:
  Pros:
    - Typescript Support
    - Unit Testing
    - Complete Applications
  Cons:
    - No Runtime Sharing

Runtime Sharing
  Pros:
    - Runtime Code Sharing
    - Can use different tech stack and different version of react
        --> does it really matter for us?
        --> In order to use different technology, we will need to wrap the component (using Single-spa or Bit)
    - Shorter time to build and deploy.
  Cons:
    - TypeScript Support      <-- This may really be a killer....
    - Unit Testing
    - Runtime Crashes




Single-spa
https://single-spa.js.org/
Single-spa fits on top of module Federation. And it gives you a away of making your components across platform.
So as I did the placeAddToCart, that's a pretty simple hacky way to do it. Single-spa does it the right way and actually
goes and wraps all the different platforms and wraps their components in kind of a uniform parcel.
And then you can deploy those using either a system js or using module Federation, which I think is very easy.
And you can consume those in any other application. So you could parcel up a view component and then reuse it in a React component.
It makes it super simple.

Bit
https://bit.dev/
Another thing I think you should keep an eye on is bit. This is a company that has been doing micro frontend / share component work for a long time.
Adn they've been looking at auto Federation. So there might be some interesting synergy is going on there. So definitely keep an eye out for my graffitis when it comes to bit.

















